import{_ as e,c as s,a1 as t,o as i}from"./chunks/framework.D2ql23Gy.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/学习笔记/无章的知识/CustomAllreduce.md","filePath":"blogs/学习笔记/无章的知识/CustomAllreduce.md"}'),n={name:"blogs/学习笔记/无章的知识/CustomAllreduce.md"};function r(l,a,p,d,c,h){return i(),s("div",null,a[0]||(a[0]=[t(`<p>关键细节可以直接跳转到：<a href="#ReduceScatter">Reduce Scatter</a></p><h2 id="符号解释" tabindex="-1">符号解释 <a class="header-anchor" href="#符号解释" aria-label="Permalink to &quot;符号解释&quot;">​</a></h2><table tabindex="0"><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>world_size（ngpus）</td><td>node中的GPU数量</td></tr><tr><td>rank_data</td><td>一个分配在GPU上的指针池，其中C++中对RankData的定义是 <code>struct{void * ptrs[8]}</code>这里取8是因为CustomAllreduce操作支持的最大GPU数量是8，这几个指针分别指向同一node上的多个GPU上的即将用于allreduce操作的输入变量</td></tr><tr><td>&quot;register&quot;</td><td>下面函数的标识符中有register存在，register应该表示的是： 将内存中的RankData拷贝到GPU显存的rank_data池中</td></tr><tr><td>handle和ptr</td><td>handle是通过CUDA进程间通信（IPC）函数获取的返回值，可以传递给其他进程并在其他进程通过OpenIpcHandle打开以获取ptr</td></tr></tbody></table><h2 id="api-overview" tabindex="-1">API overview <a class="header-anchor" href="#api-overview" aria-label="Permalink to &quot;API overview&quot;">​</a></h2><ul><li><a href="#create_shared_buffer">create_shared_buffer</a>/free_shared_buffer ： 创建、释放共享内存（GPU上的内存）</li><li><a href="#capture">capture</a>: @contextmanager The main responsibility of this context manager is the <code>register_graph_buffers</code> call at the end of the context.</li><li><a href="#register_graph_buffers">register_graph_buffers</a></li><li>should_custom_ar ：判断是否应该使用custom_all_reduce</li><li><a href="#all_reduce">all_reduce</a> :custom_all_reduce调用的函数，调用了cuda定义的函数</li><li>custom_all_reduce 对外调用的接口</li><li><a href="#is_weak_contiguous">is_weak_contiguous</a>(Tensor): 判断Tensor是否“弱连续”</li></ul><h2 id="details" tabindex="-1">Details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;Details&quot;">​</a></h2><h3 id="is-weak-contiguous" tabindex="-1"><strong>is_weak_contiguous</strong> <a class="header-anchor" href="#is-weak-contiguous" aria-label="Permalink to &quot;**is_weak_contiguous**&quot;">​</a></h3><p>例如下面的程序输出为False，但是is_weak_contiguous输出为True，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import torch</span></span>
<span class="line"><span></span></span>
<span class="line"><span>x = randn(2, 2)</span></span>
<span class="line"><span>y = x.transpose(0, 1)</span></span>
<span class="line"><span>print(y.is_contiguous())  # False</span></span>
<span class="line"><span>print(is_weak_contiguous(y))  #True</span></span></code></pre></div><p>这个函数会在is_contiguous()返回值为False时继续判断，如果输入的Tensor在分配的内存中处于最后一段而且在内存中连续，则返回True</p><p>此函数的作用： 进行进程间通信时需要使用$getMemHandle$，获取到的Handle是指向预分配内存起始地址的Handle，需要有一个offset表示输入Tensor相对这个起始地址的偏移量</p><h4 id="create-shared-buffer" tabindex="-1"><strong>create_shared_buffer</strong> <a class="header-anchor" href="#create-shared-buffer" aria-label="Permalink to &quot;**create_shared_buffer**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>返回字段</th><th style="text-align:center;">类型</th><th>说明</th></tr></thead><tbody><tr><td>ptrs</td><td style="text-align:center;">List[int]</td><td>一个指针数组，元素个数为world_size</td></tr></tbody></table><p>创建共享内存并返回指向共享内存的指针$ptrs$,其中调用了CUDA内存分配函数，并使用OpenIpcHandle打开了其他同一node上其他设备的共享内存handle。</p><h3 id="capture" tabindex="-1"><strong>capture</strong>: <a class="header-anchor" href="#capture" aria-label="Permalink to &quot;**capture**:&quot;">​</a></h3><p>这个函数是一个 <code>@contextmanager</code>，主要目的是在graph_capture最后调用 <code>register_graph_buffers</code>，将所有allreduce用到的输入地址注册到rank_data中。</p><p>解释：这个函数仅用于CUDA graph模式中，在CUDA graph 模式中，所有的操作不会立即被执行，CUDA会根据操作预先构建计算图，并一次性提交到GPU中执行，其中allreduce操作进行进程间通信需要将input注册到 <code>rank_data</code>中，这个注册的操作不会每次调用allreduce都执行一次，会在调用allreduce时将需要注册的ptr存入一个待注册数组（<code>graph_unreg_buffers_</code>）中，等到调用 <code>register_graph_buffers</code>时再将这些未被注册的ptr 进行 1. allgather获取其他进程中的handles。 2. 将这些获取到的handles打开并注册到 <code>rank_data</code>中</p><h3 id="register-graph-buffers" tabindex="-1"><strong>register_graph_buffers</strong> <a class="header-anchor" href="#register-graph-buffers" aria-label="Permalink to &quot;**register_graph_buffers**&quot;">​</a></h3><p>总是在capture上下文的最后调用，将capture上下文中执行的Allreduce代码中需要的input全部通过open_ipc_handle进行注册</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@contextmanager</span></span>
<span class="line"><span>def capture(self):</span></span>
<span class="line"><span>	try:</span></span>
<span class="line"><span>		self._IS_CAPTURING = True</span></span>
<span class="line"><span>		yield</span></span>
<span class="line"><span>	finally:</span></span>
<span class="line"><span>		self._IS_CAPTURING = False</span></span>
<span class="line"><span>		if not self.disabled:</span></span>
<span class="line"><span>			self.register_graph_buffers()</span></span></code></pre></div><h3 id="all-reduce" tabindex="-1"><strong>all_reduce</strong> <a class="header-anchor" href="#all-reduce" aria-label="Permalink to &quot;**all_reduce**&quot;">​</a></h3><p>先进行一个条件的判断（是否处于CUDA graph 模式）如果不处于CUDA graph 模式，直接将input拷贝到预先分配的GPU buffer中，如果处于CUDA graph模式，直接input放入 <code>graph_unreg_buffers_</code>并进行allreduce操作。前面解释了这样做的原因</p><p>在C++函数内部有更细节的处理：</p><p>如果满足一些特定条件（full_nvlink_且输入Tensor比较大，在world_size&lt;=4时的阈值为512KB，world_size&lt;=8时的阈值为256KB），将调用 <code>cross_device_reduce_2stage</code>（CUDA核函数），否则调用 <code>cross_device_reduce_1stage</code></p><p><code>cross_device_reduce_2stage</code>详细解释：</p><ul><li><p><strong>stage 1: reduce scatter</strong> 首先，节点中的所有GPU只负责一部分的reduce，比如对于一个GPU的rank=rank，它负责处理 <code>input[start:end]</code> ，其中</p><div class="language-apache vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">part = size / ngpus; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">start = rank * part ; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end = rank == world_size - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? size : start + part;</span></span></code></pre></div><p>将这一部分reduce之后的结果放入一个预先分配的shared_memory中</p></li><li><p><strong>stage 2: allgather.</strong> 每个GPU读取shared_memory 中的数据，并将这些数据copy到result（最终的返回结果)中。</p></li></ul><p>重要代码简化版（部分同步代码省略）：</p><ul><li>第一阶段</li></ul><div class="language-apache vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for (int idx = start + tid; idx &lt; end; idx += stride) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // 将reduce结果存入保存中间结果的共享内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tmp_shared_buf[rank][idx] = packed_reduce(ptrs,idx);//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>第2阶段：</li></ul><div class="language-apache vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// allgather操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for (int idx = tid; idx &lt; largest_part; idx += stride) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    for (int i = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i &lt; ngpus; i++) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        int gather_from_rank = ((rank + i) % ngpus);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        if (gather_from_rank == ngpus - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> || idx &lt; part) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            int dst_idx = gather_from_rank * part + idx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            result[dst_idx] = tmp_shared_buf[i][idx];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于第二阶段的同步操作，非常重要： visibility across devices is only guaranteed between threads that have the same tid.</p><h2 id="reducescatter" tabindex="-1">ReduceScatter <a class="header-anchor" href="#reducescatter" aria-label="Permalink to &quot;ReduceScatter&quot;">​</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/32583568/1734110259288-a5efb5c4-9ab3-486c-9797-80a81cfa3363.png?x-oss-process=image%2Fformat%2Cwebp" alt=""> 四个设备的reduce scatte示意图</p><p>第一阶段： reduce</p><ul><li>如上图所示，一个待reduce的Tensor，假设有4个设备rank1 2 3 4，在第一阶段时，每个GPU负责一个部分的reduce，如GPU1负责A区域的reduce，GPU2负责B区域以此类推。</li><li>reduce结束后，每个GPU上的都得到了最终reduce结果的一部分（保存在临时缓冲区），将它们allgather之后就完成了全部的reduce</li></ul><p>第二阶段： allgather</p><ul><li>这里顺序有一定的讲究，比如rank2在allgaher操作时，读取的顺序依次是B C D A，因为rank2中已经有B的reduce结果了，rank3的顺序是 C D A B，</li></ul><p>两个阶段中的线程（GPU线程）进程同步操作：</p><ol><li>最简单的同步操作： 所有GPU设置一个barrier等所有GPU上的所有线程都reduce结束后再进行第二阶段的allgather操作， 显然这样的同步操作拖累了性能</li><li>vllm的实现： <code>Note: it&#39;s important to match the tid between the two stages, because visibility across devices is only guaranteed between threads that have the same tid. If thread i computes the sum of start + i in the first stage, then thread i also gathers start + i from all ranks.</code> 也就是说，假设</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>world_size = 4</span></span>
<span class="line"><span>tensor.size() = 403</span></span></code></pre></div><ul><li>那么，除了最后一个GPU，其余GPU负责的区域大小都是 403 / 4 = 100，最后一个GPU负责的区域大小是103</li><li>对一个进程内部，假设有10个线程，那么tid（GPU线程id）为1的就负责处理【1，11，21，...，91，101（如果有）】</li></ul><p>在一个进程中，tid=1 的线程，在allgather阶段，需要其他进程中tid相同的线程reduce的结果，所以一个线程 tid=1 的线程只需要等待其他 $tid=1,rank\\in [0,ngpus]$ 线程reduce结束后就可以进行allgather操作。也就是说，GPU1中的线程1要等待所有GPU中的tid为1的线程1 reduce操作结束之后才能进行第二阶段的allgather操作。</p><p>但是在代码中，一个GPU中线程的数量最高达到 $36 * 512$ 个，如果为这些线程全部设置同步操作，GPU之间的开销未免有些大（$36 * 512$ 个线程要与其他GPU的线程进行通信）。 源码中设置了多个block，每个block中派出前ngpus个线程与其他进程进行通信，这样只有36个线程需要进行跨GPU的同步通信，进行GPU之间的同步通信后，再进行GPU内部的同步。</p><p><strong>省流版：</strong><em>简单来说，一个GPU中有多个线程 （36 * 512个），这些线程被分成多个block(36个)，每个block有多个thread（512个），==其中线程同步只能发生在block内</em>== 所以上面的步骤可以说成是每个block派 $ngpus$ 个线程与其他GPU进行同步操作（开销较大），然后block内的线程再进行同步。</p><p><strong>Question：</strong> （==这里我对源代码比较有疑问的一个点是：既然第二阶段allgather只有read操作，为什么还要将第一阶段的结果保存到临时缓冲区中而不是直接保存到最终的结果中？ 直接保存到result中感觉不会影响第二阶段的allgather==） 已解决： 这里进行运算操作时，只有input张量和临时缓冲区是被注册到shared_buffer中的，其他进程并不能直接访问到result张量。如果每次进行all reduce都注册一个result变量作为共享内存，会增加进程间通信开销（在进程间传递shared_memory句柄）。</p>`,46)]))}const g=e(n,[["render",r]]);export{u as __pageData,g as default};
