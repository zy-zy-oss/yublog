import{_ as i,c as a,a1 as e,o as t}from"./chunks/framework.D2ql23Gy.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/学习笔记/无章的知识/受控组件input.md","filePath":"blogs/学习笔记/无章的知识/受控组件input.md"}'),n={name:"blogs/学习笔记/无章的知识/受控组件input.md"};function l(h,s,p,k,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<p>在 React 中，当给 <code>&lt;input&gt;</code> 元素设置了 <code>value</code> 属性时，它会变成受控组件（controlled component）。这意味着其值完全由 React 的 <code>state</code> 管理，用户不能直接改变 <code>input</code> 的值，除非通过 React 的 <code>state</code> 更新。</p><h3 id="问题原因" tabindex="-1">问题原因 <a class="header-anchor" href="#问题原因" aria-label="Permalink to &quot;问题原因&quot;">​</a></h3><ol><li>如果设置了 <code>&lt;input value={state}&gt;</code>，但是没有提供 <code>onChange</code> 事件来更新状态，<code>input</code> 的值会被锁定在 <code>state</code> 中的初始值。</li><li>React 的设计要求受控组件的值只能通过 <code>state</code> 更新，否则 <code>input</code> 的值和 React 的 <code>state</code> 会不一致。</li></ol><p>例如：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;初始值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{value} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中，<code>input</code> 的值是 &quot;初始值&quot;，用户尝试输入时，因为没有更新 <code>state</code> 的逻辑，输入框内容不会改变。</p><hr><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><p>为了让 <code>input</code> 可编辑，同时保持与 <code>state</code> 的同步，可以通过 <code>onChange</code> 更新 <code>state</code>：</p><h4 id="解决方案代码" tabindex="-1">解决方案代码： <a class="header-anchor" href="#解决方案代码" aria-label="Permalink to &quot;解决方案代码：&quot;">​</a></h4><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;初始值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{value} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 受控组件的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.value)} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新 state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>解释：</strong></p><ol><li>当用户在 <code>input</code> 中输入内容时，会触发 <code>onChange</code> 事件。</li><li><code>e.target.value</code> 是用户当前输入的值，通过 <code>setValue</code> 更新到状态中。</li><li>React 重新渲染组件，<code>input</code> 的 <code>value</code> 属性会更新为最新的 <code>state</code>。</li></ol><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><h4 id="为什么-value-锁定了输入" tabindex="-1">为什么 <code>value</code> 锁定了输入？ <a class="header-anchor" href="#为什么-value-锁定了输入" aria-label="Permalink to &quot;为什么 \`value\` 锁定了输入？&quot;">​</a></h4><ul><li>React 将组件变成了受控组件，值由 <code>state</code> 管理，但如果没有 <code>onChange</code> 更新 <code>state</code>，<code>input</code> 的值就无法改变。</li></ul><h4 id="如何解决" tabindex="-1">如何解决？ <a class="header-anchor" href="#如何解决" aria-label="Permalink to &quot;如何解决？&quot;">​</a></h4><ul><li>为受控组件绑定 <code>onChange</code>，让用户输入时通过 <code>setState</code> 更新 React 的状态。</li></ul><p>这种机制的优点是：</p><ul><li>React 始终知道表单的值是什么，可以根据需要动态控制值，方便实现验证、格式化等复杂功能。</li></ul>`,21)]))}const E=i(n,[["render",l]]);export{r as __pageData,E as default};
