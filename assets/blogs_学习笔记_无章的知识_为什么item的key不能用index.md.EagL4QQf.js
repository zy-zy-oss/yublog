import{_ as i,c as a,a1 as e,o as t}from"./chunks/framework.D2ql23Gy.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/学习笔记/无章的知识/为什么item的key不能用index.md","filePath":"blogs/学习笔记/无章的知识/为什么item的key不能用index.md"}'),n={name:"blogs/学习笔记/无章的知识/为什么item的key不能用index.md"};function h(l,s,k,p,d,o){return t(),a("div",null,s[0]||(s[0]=[e('<h3 id="为什么不要用-index-作为-key" tabindex="-1">为什么不要用 <code>index</code> 作为 <code>key</code>？ <a class="header-anchor" href="#为什么不要用-index-作为-key" aria-label="Permalink to &quot;为什么不要用 `index` 作为 `key`？&quot;">​</a></h3><p>假设你有一个列表，每个列表项都是一个 <code>li</code> 元素。你想让 React 高效地管理这些项，当有新增、删除或者重新排序时，React 可以只更新有变化的项，而不是重新渲染整个列表。</p><p><strong><code>key</code></strong> 就是用来帮助 React 标识哪些组件是同一个、哪些是不同的。它确保 React 可以高效地更新你的界面。</p><h3 id="_1-index-会随着列表变化而变化" tabindex="-1">1. <strong><code>index</code> 会随着列表变化而变化</strong> ： <a class="header-anchor" href="#_1-index-会随着列表变化而变化" aria-label="Permalink to &quot;1.  **`index` 会随着列表变化而变化** ：&quot;">​</a></h3><p>假设你有这么一个列表：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;苹果&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;香蕉&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;橙子&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>React 渲染时，可能会给每个列表项分配一个 <code>key</code>，比如用 <code>index</code>：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{index}&gt;{item}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ))}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>假如你把 <code>香蕉</code> 和 <code>橙子</code> 的位置交换了：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;苹果&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;橙子&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;香蕉&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>此时，<code>index</code> 变了，原本 <code>香蕉</code> 的 <code>index</code> 是 1，现在变成了 2；原本 <code>橙子</code> 的 <code>index</code> 是 2，现在变成了 1。React 看到这些 <code>key</code> 变了，它就会认为这些项是 <strong>完全不同的</strong> ，而不是原来的那两个项位置交换了。</p><h3 id="_2-状态丢失问题" tabindex="-1">2. <strong>状态丢失问题</strong> ： <a class="header-anchor" href="#_2-状态丢失问题" aria-label="Permalink to &quot;2.  **状态丢失问题** ：&quot;">​</a></h3><p>假设你的每个列表项都有一些内部状态，比如一个复选框的勾选状态。如果你用 <code>index</code> 作为 <code>key</code>，并且对列表进行了排序，React 就会无法正确识别哪些项是之前同一个，导致状态丢失。</p><p>比如，你有一个任务列表，每个任务有一个复选框。如果你用 <code>index</code> 作为 <code>key</code>，当任务顺序变化时，React 会丢失任务的勾选状态，因为它认为这些任务已经是全新的项。</p><h3 id="_3-key-应该是唯一且不变的" tabindex="-1">3. <strong><code>key</code> 应该是唯一且不变的</strong> ： <a class="header-anchor" href="#_3-key-应该是唯一且不变的" aria-label="Permalink to &quot;3.  **`key` 应该是唯一且不变的** ：&quot;">​</a></h3><p>一个好的 <code>key</code> 是 <strong>唯一的</strong> ，而且 <strong>不变的</strong> ，它应该能稳定地标识每个组件，而不是随着排序、删除等操作而变化。</p><h3 id="最好的做法是" tabindex="-1">最好的做法是： <a class="header-anchor" href="#最好的做法是" aria-label="Permalink to &quot;最好的做法是：&quot;">​</a></h3><p>如果你的数据本身有唯一的 <code>id</code>，比如每个任务有一个任务编号，那么就用 <code>id</code> 作为 <code>key</code>：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{item.id}&gt;{item.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ))}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这样，不管你如何排序或修改列表，React 总能准确知道哪个 <code>li</code> 元素对应哪个任务，因为 <code>id</code> 是唯一且不会变的。</p><h3 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><ul><li><strong>不要用 <code>index</code> 作为 <code>key</code></strong> ，因为它会随着列表项的增删、排序变化而变化，导致 React 无法正确管理组件。</li><li><strong>最好用每个项的唯一标识符（如 <code>id</code>）作为 <code>key</code></strong> ，这样 React 就能正确地识别组件，避免性能问题和状态丢失。</li></ul>',22)]))}const r=i(n,[["render",h]]);export{c as __pageData,r as default};
