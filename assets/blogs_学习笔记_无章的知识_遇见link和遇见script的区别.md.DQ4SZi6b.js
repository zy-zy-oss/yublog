import{_ as o,c as r,a1 as l,o as i}from"./chunks/framework.D2ql23Gy.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/学习笔记/无章的知识/遇见link和遇见script的区别.md","filePath":"blogs/学习笔记/无章的知识/遇见link和遇见script的区别.md"}'),s={name:"blogs/学习笔记/无章的知识/遇见link和遇见script的区别.md"};function e(n,t,c,a,p,d){return i(),r("div",null,t[0]||(t[0]=[l("<ul><li><p><strong><code>&lt;link&gt;</code> 加载外部 CSS 文件：</strong></p><ul><li><code>&lt;link&gt;</code> 标签用于加载外部 CSS 文件时， <strong>浏览器会在解析 HTML 时异步加载 CSS 文件</strong> ，但 <strong>它不会阻塞页面的渲染</strong> 。</li><li>在文件加载后，浏览器会应用 CSS 样式，进行布局（Reflow）和绘制（Paint）阶段，渲染页面的外观。</li><li><strong>阻塞渲染</strong> ：外部 CSS 的加载会阻止网页显示未应用样式的内容（即页面会在样式加载之前被白屏或以未样式化的形式展示），但是在加载期间并不阻塞 HTML 的解析。</li></ul><p><strong>示例</strong> ：</p></li><li><p><strong><code>&lt;script&gt;</code> 加载外部 JavaScript 文件：</strong></p><ul><li>默认情况下， <strong><code>&lt;script&gt;</code> 标签会阻塞 HTML 解析</strong> ，即浏览器会等待 JavaScript 文件下载并执行完毕后才继续解析后面的 HTML 内容。</li><li>JavaScript 的执行通常是 <strong>同步的</strong> ，这意味着它会在浏览器执行时直接影响 DOM 树的构建和渲染过程。</li><li>使用 <code>async</code> 或 <code>defer</code> 属性可以控制 JavaScript 的加载和执行行为，避免它阻塞页面的渲染。</li></ul></li></ul>",1)]))}const S=o(s,[["render",e]]);export{_ as __pageData,S as default};
